!(dirname(@__FILE__) in LOAD_PATH) && push!(LOAD_PATH, dirname(@__FILE__))
using DSP, Test, FilterTestHelpers
using LinearAlgebra: norm
using DelimitedFiles: readdlm

#
# Butterworth filter prototype
#
@testset "Butterworth" begin
    # Poles of 20 pole Butterworth filter prototype from MATLAB 2013b (buttap(20))
    matlab_p = [-0.07845909572784487+0.996917333733128im,
        -0.07845909572784487-0.996917333733128im,
        -0.2334453638559053+0.9723699203976767im,
        -0.2334453638559053-0.9723699203976767im,
        -0.3826834323650897+0.9238795325112867im,
        -0.3826834323650897-0.9238795325112867im,
        -0.5224985647159488+0.8526401643540923im,
        -0.5224985647159488-0.8526401643540923im,
        -0.6494480483301835+0.760405965600031im,
        -0.6494480483301835-0.760405965600031im,
        -0.7604059656000308+0.6494480483301838im,
        -0.7604059656000308-0.6494480483301838im,
        -0.8526401643540922+0.5224985647159489im,
        -0.8526401643540922-0.5224985647159489im,
        -0.9238795325112867+0.3826834323650899im,
        -0.9238795325112867-0.3826834323650899im,
        -0.9723699203976766+0.2334453638559055im,
        -0.9723699203976766-0.2334453638559055im,
        -0.996917333733128+0.07845909572784507im,
        -0.996917333733128-0.07845909572784507im]
    matlab_butter = ZeroPoleGain(Float64[], matlab_p, 1)

    # Test that our answers are close to MATLAB's and at least as accurate
    butter = Butterworth(20)
    zpkfilter_eq(butter, matlab_butter)
    zpkfilter_accuracy(butter, matlab_butter, Butterworth(BigFloat, 20))

    # Poles of 19 pole Butterworth filter prototype from MATLAB 2013b (buttap(19))
    matlab_p = [-0.08257934547233227+0.9965844930066698im,
        -0.08257934547233227-0.9965844930066698im,
        -0.2454854871407991+0.9694002659393304im,
        -0.2454854871407991-0.9694002659393304im,
        -0.4016954246529694+0.9157733266550574im,
        -0.4016954246529694-0.9157733266550574im,
        -0.5469481581224267+0.8371664782625287im,
        -0.5469481581224267-0.8371664782625287im,
        -0.6772815716257409+0.7357239106731317im,
        -0.6772815716257409-0.7357239106731317im,
        -0.7891405093963935+0.6142127126896679im,
        -0.7891405093963935-0.6142127126896679im,
        -0.8794737512064892+0.4759473930370733im,
        -0.8794737512064892-0.4759473930370733im,
        -0.9458172417006346+0.3246994692046836im,
        -0.9458172417006346-0.3246994692046836im,
        -0.9863613034027224+0.1645945902807336im,
        -0.9863613034027224-0.1645945902807336im,
        -1+0im]

    # Test that our answers are close to MATLAB's and at least as accurate
    zpkfilter_eq(Butterworth(19), ZeroPoleGain(Float64[], matlab_p, 1))
    zpkfilter_accuracy(Butterworth(19), ZeroPoleGain(Float64[], matlab_p, 1), Butterworth(BigFloat, 19))
end

#
# Chebyshev type I filter
#
@testset "Chebyshev I" begin
    # Poles of 20 pole Butterworth filter prototype with 1 dB passband ripple from MATLAB 2013b:
    #=
        [z, p, k] = cheb1ap(20, 1)
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
    =#
    matlab_p = [-0.005606643513655412+0.9994594480354867im,
        -0.01668187637027696+0.9748494394091176im,
        -0.02734634606668882+0.9262354022446964im,
        -0.03733745796561948+0.854814375477951im,
        -0.04640919773351807+0.7623449818206758im,
        -0.05433818902992066+0.6511041246330369im,
        -0.06092919377429644+0.5238309230062319im,
        -0.06601991955554824+0.3836592655598524im,
        -0.06948501580979141+0.2340406437032877im,
        -0.07123916036725134+0.07865916446238384im,
        -0.07123916036725134-0.07865916446238384im,
        -0.06948501580979141-0.2340406437032877im,
        -0.06601991955554824-0.3836592655598524im,
        -0.06092919377429644-0.5238309230062319im,
        -0.05433818902992066-0.6511041246330369im,
        -0.04640919773351807-0.7623449818206758im,
        -0.03733745796561948-0.854814375477951im,
        -0.02734634606668882-0.9262354022446964im,
        -0.01668187637027696-0.9748494394091176im,
        -0.005606643513655412-0.9994594480354867im]
    matlab_k = 3.748372513504540e-06

    # Test that our answers are close to MATLAB's and at least as accurate
    zpkfilter_eq(Chebyshev1(20, 1), ZeroPoleGain(Float64[], matlab_p, matlab_k))
    zpkfilter_accuracy(Chebyshev1(20, 1), ZeroPoleGain(Float64[], matlab_p, matlab_k), Chebyshev1(BigFloat, 20, 1))

    # Poles of 19 pole Butterworth filter prototype with 1 dB passband ripple from MATLAB 2013b:
    #=
        [z, p, k] = cheb1ap(19, 1)
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    matlab_p = [-0.006212227114275604+0.9994004289494353im,
        -0.0184672279812169+0.9721393904901743im,
        -0.03021849100930104+0.9183609236365976im,
        -0.04114547237637834+0.8395319647744703im,
        -0.05095011251526942+0.7378027624097928im,
        -0.0593649664017747+0.6159482239948341im,
        -0.06616049875775722+0.4772922236864799im,
        -0.07115134517517649+0.3256169357239265im,
        -0.07420136837393095+0.1650596665748249im,
        -0.07522737167197566+0im,
        -0.07420136837393095-0.1650596665748249im,
        -0.07115134517517649-0.3256169357239265im,
        -0.06616049875775722-0.4772922236864799im,
        -0.0593649664017747-0.6159482239948341im,
        -0.05095011251526942-0.7378027624097928im,
        -0.04114547237637834-0.8395319647744703im,
        -0.03021849100930104-0.9183609236365976im,
        -0.0184672279812169-0.9721393904901743im,
        -0.006212227114275604-0.9994004289494353im]
    matlab_k = 7.496745027009062e-06

    # Test that our answers are close to MATLAB's and at least as accurate
    zpkfilter_eq(Chebyshev1(19, 1), ZeroPoleGain(Float64[], matlab_p, matlab_k))
    zpkfilter_accuracy(Chebyshev1(19, 1), ZeroPoleGain(Float64[], matlab_p, matlab_k), Chebyshev1(BigFloat, 19, 1))
end

#
# Chebyshev type II filter
#
@testset "Chebyshev II" begin
    # 20 pole Butterworth filter prototype with 1 dB passband ripple from MATLAB 2013b:
    #=
        [z, p, k] = cheb2ap(20, 1)
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    matlab_z = [0+1.003092198482826im, 0-1.003092198482826im,
        0+1.028415193665209im, 0-1.028415193665209im,
        0+1.082392200292394im, 0-1.082392200292394im,
        0+1.172827696614009im, 0-1.172827696614009im,
        0+1.315086999890785im, 0-1.315086999890785im,
        0+1.539769043222366im, 0-1.539769043222366im,
        0+1.913880855430943im, 0-1.913880855430943im,
        0+2.613125929752753im, 0-2.613125929752753im,
        0+4.283657569731185im, 0-4.283657569731185im,
        0+12.74549484318238im, 0-12.74549484318238im]
    matlab_p = [-0.001929675700544753-1.002788598382701im,
        -0.006034873757627809-1.028072311003105im,
        -0.010957850142167-1.081957626858823im,
        -0.01756373888305481-1.172213900920771im,
        -0.02744258171352171-1.314120759169777im,
        -0.04403133250736632-1.538048178699878im,
        -0.07621942506983267-1.910267531994771im,
        -0.1536690174908018-2.6032737531287im,
        -0.4316587213861887-4.238414904224276im,
        -3.610083779585366-11.62012078608171im,
        -3.610083779585366+11.62012078608171im,
        -0.4316587213861887+4.238414904224276im,
        -0.1536690174908018+2.6032737531287im,
        -0.07621942506983267+1.910267531994771im,
        -0.04403133250736632+1.538048178699878im,
        -0.02744258171352171+1.314120759169777im,
        -0.01756373888305481+1.172213900920771im,
        -0.010957850142167+1.081957626858823im,
        -0.006034873757627809+1.028072311003105im,
        -0.001929675700544753+1.002788598382701im]
    matlab_k = 0.8912509381337452
    matlab_f = ZeroPoleGain(matlab_z, matlab_p, matlab_k)

    f = Chebyshev2(20, 1)
    zpkfilter_eq(f, matlab_f)
    zpkfilter_accuracy(f, matlab_f, Chebyshev2(BigFloat, 20, 1), compare_gain_at=0)

    # 19 pole Butterworth filter prototype with 1 dB passband ripple from MATLAB 2013b:
    #=
        [z, p, k] = cheb2ap(19, 1)
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    matlab_z = [0+1.003427212662145im, 0-1.003427212662145im,
    0+1.031565634068626im, 0-1.031565634068626im,
    0+1.091973276457601im, 0-1.091973276457601im,
    0+1.194505544554793im, 0-1.194505544554793im,
    0+1.359205519207709im, 0-1.359205519207709im,
    0+1.628100459889458im, 0-1.628100459889458im,
    0+2.101072544213108im, 0-2.101072544213108im,
    0+3.079770972368366im, 0-3.079770972368366im,
    0+6.075533820974263im, 0-6.075533820974263im]
    matlab_p = [-0.002139218568677465-1.003090263923361im,
        -0.006720708432694556-1.031180124433753im,
        -0.01232195186345456-1.091472452757043im,
        -0.02007306444044342-1.193772338103026im,
        -0.03217434756636293-1.357992987527419im,
        -0.05375960613144559-1.625783486413104im,
        -0.09966387580015423-2.09563676642751im,
        -0.2295218019875045-3.061543704346429im,
        -0.9149742173123645-5.932401750359961im,
        -38.84170469908301+0im,
        -0.9149742173123645+5.932401750359961im,
        -0.2295218019875045+3.061543704346429im,
        -0.09966387580015423+2.09563676642751im,
        -0.05375960613144559+1.625783486413104im,
        -0.03217434756636293+1.357992987527419im,
        -0.02007306444044342+1.193772338103026im,
        -0.01232195186345456+1.091472452757043im,
        -0.006720708432694556+1.031180124433753im,
        -0.002139218568677465+1.003090263923361im]
    matlab_k = 37.33930783884512
    matlab_f = ZeroPoleGain(matlab_z, matlab_p, matlab_k)

    f = Chebyshev2(19, 1)
    zpkfilter_eq(f, matlab_f)
    zpkfilter_accuracy(f, matlab_f, Chebyshev2(BigFloat, 19, 1), compare_gain_at=0)
end

#
# Elliptic filter
#
@testset "elliptic" begin
    # 20 pole elliptic filter prototype with 0.1 dB passband ripple and 10
    # dB stopband ripple from MATLAB 2013b:
    #=
        [z, p, k] = ellipap(20, 0.1, 10)
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    matlab_z = [0-1.953252853757711im, 0+1.953252853757711im,
        0-1.069599937693626im, 0+1.069599937693626im,
        0-1.007032209276402im, 0+1.007032209276402im,
        0-1.000730367252677im, 0+1.000730367252677im,
        0-1.000076070678288im, 0+1.000076070678288im,
        0-1.000007925871874im, 0+1.000007925871874im,
        0-1.000000826312751im, 0+1.000000826312751im,
        0-1.000000086632384im, 0+1.000000086632384im,
        0-1.000000009576065im, 0+1.000000009576065im,
        0-1.000000001633984im, 0+1.000000001633984im]
    matlab_p = [-0.6665552331000151-0.9586923119289487im,
        -0.6665552331000151+0.9586923119289487im,
        -0.06598422536270995-1.015686365686964im,
        -0.06598422536270995+1.015686365686964im,
        -0.006773291804375061-1.001821704927991im,
        -0.006773291804375061+1.001821704927991im,
        -0.0007045345890457818-1.000191780070487im,
        -0.0007045345890457818+1.000191780070487im,
        -7.339097059946433e-05-1.000020003037497im,
        -7.339097059946433e-05+1.000020003037497im,
        -7.646273200288023e-06-1.000002084836051im,
        -7.646273200288023e-06+1.000002084836051im,
        -7.966432964216136e-07-1.000000217756124im,
        -7.966432964216136e-07+1.000000217756124im,
        -8.299912436196738e-08-1.000000023227775im,
        -8.299912436196738e-08+1.000000023227775im,
        -8.637784231770464e-09-1.000000002962719im,
        -8.637784231770464e-09+1.000000002962719im,
        -8.070974080610083e-10-1.000000000874029im,
        -8.070974080610083e-10+1.000000000874029im]
    matlab_k = 0.3162277662398871
    matlab_f = ZeroPoleGain(matlab_z, matlab_p, matlab_k)

    f = Elliptic(20, 0.1, 10)
    zpkfilter_eq(f, matlab_f)
    zpkfilter_accuracy(f, matlab_f, Elliptic(BigFloat, 20, 0.1, 10), eps=1e-9)

    # 19 pole elliptic filter prototype with 0.1 dB passband ripple and 10
    # dB stopband ripple from MATLAB 2013b:
    #=
        [z, p, k] = ellipap(19, 0.1, 10)
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    matlab_z = [0-1.232609672486912im, 0+1.232609672486912im,
        0-1.021948255265862im, 0+1.021948255265862im,
        0-1.002264470627064im, 0+1.002264470627064im,
        0-1.000235691798532im, 0+1.000235691798532im,
        0-1.000024555183434im, 0+1.000024555183434im,
        0-1.000002559984621im, 0+1.000002559984621im,
        0-1.000000268394018im, 0+1.000000268394018im,
        0-1.00000002966741im, 0+1.00000002966741im,
        0-1.000000005062212im, 0+1.000000005062212im]
    matlab_p = [-0.2102804655411482-1.034611529620449im,
        -0.2102804655411482+1.034611529620449im,
        -0.0210635609742992-1.005504639644632im,
        -0.0210635609742992+1.005504639644632im,
        -0.002183581313750937-1.00059265523267im,
        -0.002183581313750937+1.00059265523267im,
        -0.0002273805846473938-1.000061954788962im,
        -0.0002273805846473938+1.000061954788962im,
        -2.368886404726722e-05-1.000006458811389im,
        -2.368886404726722e-05+1.000006458811389im,
        -2.468065209676509e-06-1.00000067462382im,
        -2.468065209676509e-06+1.00000067462382im,
        -2.571378798158274e-07-1.000000071961468im,
        -2.571378798158274e-07+1.000000071961468im,
        -2.676054057433227e-08-1.000000009178736im,
        -2.676054057433227e-08+1.000000009178736im,
        -2.500451772444974e-09-1.00000000270781im,
        -2.500451772444974e-09+1.00000000270781im,
        -1.309071549907812+0im]
    matlab_k = 0.9266824319626478
    matlab_f = ZeroPoleGain(matlab_z, matlab_p, matlab_k)

    f = Elliptic(19, 0.1, 10)
    zpkfilter_eq(f, matlab_f)
    zpkfilter_accuracy(f, matlab_f, Elliptic(BigFloat, 19, 0.1, 10), eps=4e-9)
end

#
# Conversion between zpk and tf
#
@testset "ZPK to TF" begin
    # Output of [z, p, k] = buttap(20); [b, a] = zp2tf(z, p, k)
    m_a = [1, 12.74549484318237, 81.22381939879423, 343.6513712403923,
        1081.352361133001, 2687.409807920676, 5468.931438945091,
        9326.061201886809, 13528.36656744904, 16852.27707949905,
        18122.54155403868, 16852.27707949905, 13528.36656744904,
        9326.061201886809, 5468.931438945092, 2687.409807920676,
        1081.352361133001, 343.6513712403923, 81.22381939879423,
        12.74549484318237, 1]

    f = convert(PolynomialRatio, Butterworth(20))
    @test coefb(f) ≈ [1]
    @test coefa(f) ≈ m_a

    # Test that our answers are more accurate than MATLAB's
    accurate_a = coefa(convert(PolynomialRatio, Butterworth(BigFloat, 20)))
    @test coefa(f) ≈ map(Float64, accurate_a)
    @test sum(abs.(coefa(f) - accurate_a)) <= sum(abs.(m_a - accurate_a))
end

#
# Conversion between tf and zpk
#
@testset "TF to ZPK" begin
    f = convert(ZeroPoleGain, convert(PolynomialRatio, Butterworth(20)))
    zpkfilter_eq(f, Butterworth(20), 1e-6)

    # compare frequency responses to a reference
    freq = [0; 10 .^ range(big(-2), 2, length=10000)]
    H_ref = freqresp(Butterworth(BigFloat, 20), freq)
    H_1 = freqresp(f, freq)
    @test all(isapprox.(H_1 ./ H_ref, 1; atol=1e-10))
    @test H_1 ./ H_ref ≈ ones(length(freq)) atol=1e-9
end

#
# Analog filter design
#
@testset "analogfilter" begin

#
# Low pass filter construction
#
@testset "lowpass" begin
    # 20 pole Butterworth low pass filter from Octave v7.1.0 with 'signal' package v1.4.2:
    #=
        [z, p, k] = butter(20, 160, 's')
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    m_z = Float64[]
    m_p = [-12.55345531645518+159.5067733973005im,
        -37.35125821694486+155.5791872636283im,
        -61.22934917841435+147.8207252018059im,
        -83.59977035455181+136.4224262966548im,
        -103.9116877328294+121.664954496005im,
        -121.664954496005+103.9116877328294im,
        -136.4224262966547+83.59977035455182im,
        -147.8207252018059+61.22934917841438im,
        -155.5791872636283+37.35125821694488im,
        -159.5067733973005+12.55345531645521im,
        -159.5067733973005-12.5534553164551im,
        -155.5791872636283-37.35125821694484im,
        -147.8207252018059-61.22934917841435im,
        -136.4224262966547-83.59977035455186im,
        -121.664954496005-103.9116877328293im,
        -103.9116877328294-121.6649544960049im,
        -83.59977035455177-136.4224262966548im,
        -61.22934917841432-147.8207252018059im,
        -37.35125821694496-155.5791872636282im,
        -12.55345531645529-159.5067733973005im]
    m_k = 1.208925819614628e+44
    m_f = ZeroPoleGain(m_z, m_p, m_k)

    f = analogfilter(Lowpass(160), Butterworth(20))
    zpkfilter_eq(f, m_f)

    # Test that our answers are more accurate than Octave's
    accurate_ft = analogfilter(Lowpass(160), Butterworth(BigFloat, 20))
    zpkfilter_eq(f, accurate_ft)
    zpkfilter_accuracy(f, m_f, accurate_ft)

    # 20 pole Chebyshev type II low pass filter from Octave v7.1.0 with 'signal' package v1.4.2:
    #=
        [z, p, k] = cheby2(20, 20, 125, 's')
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    m_z = [0+125.3865248103532im,
        0+128.5518992081511im,
        0+135.2990250365493im,
        0+146.6034620767511im,
        0+164.3858749863481im,
        0+192.4711304027958im,
        0+239.2351069288678im,
        0+326.6407412190941im,
        0+535.457196216398im,
        0+1593.186855397796im,
        -0-1593.186855397798im,
        -0-535.4571962163983im,
        -0-326.6407412190941im,
        -0-239.2351069288679im,
        -0-192.4711304027958im,
        -0-164.3858749863481im,
        -0-146.6034620767511im,
        -0-135.2990250365493im,
        -0-128.5518992081511im,
        -0-125.3865248103532im]
    m_p = [-1.449483681810904-123.9783328711391im,
        -4.528119219303787-126.9640384311836im,
        -8.201917363851292-133.2931058340276im,
        -13.08931684507386-143.7852305552293im,
        -20.29857689562521-159.9864874089479im,
        -32.13368011907538-184.7463979299837im,
        -54.16804616452138-223.4493516560464im,
        -102.6443077693654-286.2040648800218im,
        -236.9327721392577-382.908922351036im,
        -651.7534151094241-345.2900624456513im,
        -651.7534151094244+345.2900624456508im,
        -236.9327721392579+382.908922351036im,
        -102.6443077693654+286.2040648800218im,
        -54.16804616452142+223.4493516560465im,
        -32.13368011907541+184.7463979299837im,
        -20.29857689562521+159.9864874089479im,
        -13.08931684507386+143.7852305552293im,
        -8.201917363851296+133.2931058340276im,
        -4.52811921930379+126.9640384311836im,
        -1.449483681810906+123.9783328711391im]
    m_k = 0.1
    m_f = ZeroPoleGain(m_z, m_p, m_k)

    f = analogfilter(Lowpass(125), Chebyshev2(20, 20))
    zpkfilter_eq(f, m_f)
end

#
# High pass filter construction
#
@testset "highpass" begin
    # 20 pole Butterworth high pass filter from Octave v7.1.0 with 'signal' package v1.4.2:
    #=
        [z, p, k] = butter(20, 90, 'high', 's')
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    m_z = zeros(ComplexF64, 20)
    m_p = [-7.06131861550604-89.72256003598153im,
        -21.01008274703148-87.51329283579089im,
        -34.44150891285808-83.14915792601582im,
        -47.02487082443539-76.7376147918683im,
        -58.45032434971651-68.43653690400278im,
        -68.43653690400278-58.45032434971653im,
        -76.7376147918683-47.0248708244354im,
        -83.1491579260158-34.44150891285809im,
        -87.51329283579089-21.0100827470315im,
        -89.7225600359815-7.061318615506057im,
        -89.7225600359815+7.061318615505993im,
        -87.51329283579089+21.01008274703147im,
        -83.1491579260158+34.44150891285807im,
        -76.73761479186828+47.02487082443542im,
        -68.43653690400282+58.45032434971649im,
        -58.45032434971657+68.43653690400275im,
        -47.02487082443537+76.73761479186831im,
        -34.44150891285805+83.14915792601582im,
        -21.01008274703154+87.51329283579089im,
        -7.0613186155061+89.7225600359815im]
    m_k = 1
    m_f = ZeroPoleGain(m_z, m_p, m_k)

    f = analogfilter(Highpass(90), Butterworth(20))
    zpkfilter_eq(f, m_f)

    # Test that our answers are more accurate than Octave's
    accurate_ft = analogfilter(Highpass(90), Butterworth(BigFloat, 20))
    zpkfilter_eq(f, accurate_ft)
    zpkfilter_accuracy(f, m_f, accurate_ft)

    # 20 pole Chebyshev type II high pass filter from Octave v7.1.0 with 'signal' package v1.4.2:
    #=
        [z, p, k] = cheby2(20, 20, 66, 'high', 's')
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    m_z = [0-65.79654402638644im,
        0-64.17641474624665im,
        0-60.97604914574492im,
        0-56.27425084737008im,
        0-50.18679372960204im,
        0-42.86357118979213im,
        0-34.48490527125263im,
        0-25.25710653609593im,
        0-15.40739401448976im,
        0-5.17830031803777im,
        -0+5.178300318037762im,
        -0+15.40739401448975im,
        -0+25.25710653609593im,
        -0+34.48490527125262im,
        -0+42.86357118979212im,
        -0+50.18679372960204im,
        -0+56.27425084737008im,
        -0+60.97604914574492im,
        -0+64.17641474624665im,
        -0+65.79654402638644im]
    m_p = [-0.7778866806151772+66.53479099871331im,
        -2.314505890110906+64.8964836280136im,
        -3.794134283187449+61.66020945131124im,
        -5.18033849820216+56.90565627941486im,
        -6.438985586833352+50.74989699087384im,
        -7.539083480548723+43.34450680916586im,
        -8.453544118189416+34.8718310176455im,
        -9.159850443935859+25.54049501349882im,
        -9.640610851951873+15.58026725807657im,
        -9.883987425439784+5.236401614818001im,
        -9.883987425439786-5.236401614817994im,
        -9.640610851951875-15.58026725807657im,
        -9.159850443935859-25.54049501349882im,
        -8.453544118189415-34.87183101764548im,
        -7.539083480548723-43.34450680916584im,
        -6.438985586833353-50.74989699087384im,
        -5.180338498202161-56.90565627941486im,
        -3.79413428318745-61.66020945131124im,
        -2.314505890110907-64.8964836280136im,
        -0.7778866806151785-66.53479099871331im]
    m_k = 0.9999999999999999
    m_f = ZeroPoleGain(m_z, m_p, m_k)

    f = analogfilter(Highpass(66), Chebyshev2(20, 20))
    zpkfilter_eq(f, m_f)
end

#
# Band pass filter construction
#
@testset "bandpass" begin
    # 20 pole Butterworth band pass filter from Octave v7.1.0 with 'signal' package v1.4.2:
    #=
        [z, p, k] = butter(10, [270 310], 's')
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    m_z = zeros(ComplexF64, 10)
    m_p = [-2.915549380289319-270.2125554311187im,
        -8.521320522750218-271.8959823084061im,
        -13.45083646743282-275.1682131274388im,
        -17.26007001162113-279.8236333332792im,
        -19.53965594443063-285.5226977337037im,
        -19.53965594443063+285.5226977337037im,
        -17.26007001162113+279.8236333332792im,
        -13.45083646743283+275.1682131274388im,
        -8.521320522750223+271.8959823084061im,
        -2.915549380289328+270.2125554311187im,
        -3.341829221319905+309.7200890549242im,
        -9.638299466831649+307.5362432759408im,
        -14.83343478002907+303.4524843749007im,
        -18.38019095591358+297.9832533228611im,
        -19.96787767937488+291.780076335313im,
        -19.96787767937488-291.780076335313im,
        -18.38019095591358-297.9832533228611im,
        -14.83343478002908-303.4524843749007im,
        -9.638299466831654-307.5362432759408im,
        -3.341829221319914-309.7200890549242im]
    m_k = 1.048575999999999e+16
    m_f = ZeroPoleGain(m_z, m_p, m_k)

    f = analogfilter(Bandpass(270, 310), Butterworth(10))
    zpkfilter_eq(f, m_f)

    # Test that our answers are more accurate than Octave's
    accurate_ft = analogfilter(Bandpass(270, 310), Butterworth(BigFloat, 10))
    zpkfilter_eq(f, accurate_ft)
    zpkfilter_accuracy(f, m_f, accurate_ft)

    # 20 pole Chebyshev type II band pass filter from Octave v7.1.0 with 'signal' package v1.4.2:
    #=
        [z, p, k] = cheby2(10, 20, [190 250], 's')
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    m_z = [0+250.4252593090611im,
        0+254.2001808740071im,
        0+264.462439982938im,
        0+293.8231992125436im,
        0+482.0788021962427im,
        0+98.53160890626305im,
        0+161.6618433374276im,
        0+179.6096262405523im,
        0+186.8606066159454im,
        0+189.677351761781im,
        0-189.677351761781im,
        0-186.8606066159454im,
        0-179.6096262405523im,
        0-161.6618433374276im,
        0-98.53160890626316im,
        -0-482.0788021962434im,
        -0-293.8231992125436im,
        -0-264.462439982938im,
        -0-254.2001808740071im,
        -0-250.4252593090611im]
    m_p = [-1.159107789692895+190.8611660291904im,
        -4.000654085990877+188.6403052854074im,
        -9.037008961206835+183.4444949099989im,
        -21.35388385521179+173.8145162299483im,
        -61.57650432918016+166.7119852737923im,
        -61.57650432918024-166.7119852737923im,
        -21.35388385521181-173.8145162299483im,
        -9.037008961206837-183.4444949099989im,
        -4.000654085990881-188.6403052854074im,
        -1.159107789692896-190.8611660291904im,
        -1.511354249095075-248.8628208959621im,
        -5.337775950181324-251.6887646730691im,
        -12.72495549847622-258.3070398835202im,
        -33.07443807174172-269.2164803366236im,
        -92.60488998249622-250.7181143721903im,
        -92.6048899824963+250.7181143721902im,
        -33.07443807174174+269.2164803366236im,
        -12.72495549847623+258.3070398835203im,
        -5.337775950181328+251.6887646730691im,
        -1.511354249095076+248.8628208959621im]
    m_k = 0.09999999999999984
    m_f = ZeroPoleGain(m_z, m_p, m_k)

    f = analogfilter(Bandpass(190, 250), Chebyshev2(10, 20))
    zpkfilter_eq(f, m_f)
end

#
# Band stop filter construction
#
@testset "bandstop" begin
    # 20 pole Butterworth band stop filter from Octave v7.1.0 with 'signal' package v1.4.2:
    #=
        [z, p, k] = butter(10, [0.7 1.6], 'stop', 's')
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    m_z = repeat([-0-1.058300524425836im, 0+1.058300524425836im], 10)
    m_p = [-0.04309380563110815+0.7015482430268258im,
        -0.1308664113103317+0.7145820826964302im,
        -0.2229112484606248+0.7443835099661267im,
        -0.3193507833013514+0.7995132199453623im,
        -0.4119888380102123+0.8931735934888791im,
        -0.4119888380102124-0.8931735934888794im,
        -0.3193507833013514-0.7995132199453624im,
        -0.2229112484606249-0.7443835099661267im,
        -0.1308664113103318-0.7145820826964302im,
        -0.04309380563110828-0.7015482430268258im,
        -0.09769721290509939-1.59046774956245im,
        -0.2777250384552604-1.516487954465962im,
        -0.413484854607268-1.38077961303402im,
        -0.4825550884681798-1.208104669710955im,
        -0.4769306685254118-1.033964612025087im,
        -0.4769306685254118+1.033964612025087im,
        -0.4825550884681798+1.208104669710955im,
        -0.4134848546072681+1.38077961303402im,
        -0.2777250384552605+1.516487954465962im,
        -0.09769721290509968+1.59046774956245im]
    m_k = 1
    m_f = ZeroPoleGain(m_z, m_p, m_k)

    f = analogfilter(Bandstop(0.7, 1.6), Butterworth(10))
    zpkfilter_eq(f, m_f)

    # Test that our answers are more accurate than Octave's
    accurate_ft = analogfilter(Bandstop(0.7, 1.6), Butterworth(BigFloat, 10))
    zpkfilter_eq(f, accurate_ft)
    zpkfilter_accuracy(f, m_f, accurate_ft)

    # 20 pole Chebyshev type II band stop filter from Octave v7.1.0 with 'signal' package v1.4.2:
    #=
        [z, p, k] = cheby2(10, 20, [0.5 2.3], 'stop', 's')
        sprintf('%.16g%+.16gim,', [real(z) imag(z)]')
        sprintf('%.16g%+.16gim,', [real(p) imag(p)]')
        sprintf('%.16g', k)
    =#
    m_z = [0+0.503983178184144im,
        0+0.5371434279869983im,
        0+0.6106002882660998im,
        0+0.7389916508513299im,
        0+0.9407921317118269im,
        0+1.222374168784242im,
        0+1.556174550382514im,
        0+1.883392494401885im,
        0+2.14095517152606im,
        0+2.281822191255392im,
        0-2.281822191255392im,
        0-2.14095517152606im,
        0-1.883392494401885im,
        0-1.556174550382514im,
        0-1.222374168784242im,
        -0-0.9407921317118271im,
        -0-0.7389916508513299im,
        -0-0.6106002882660999im,
        -0-0.5371434279869983im,
        -0-0.5039831781841441im]
    m_p = [-0.01475888920396031-0.4894352259844157im,
        -0.04749747130904515-0.5194263252489844im,
        -0.09056774411691182-0.5861064717077694im,
        -0.1517237468562032-0.7049784822815074im,
        -0.2321776170431385-0.9017362380749432im,
        -0.2321776170431386+0.9017362380749435im,
        -0.1517237468562033+0.7049784822815075im,
        -0.09056774411691182+0.5861064717077694im,
        -0.04749747130904519+0.5194263252489846im,
        -0.01475888920396032+0.4894352259844156im,
        -0.0707890904909383+2.347512338012997im,
        -0.2007724354752911+2.195621903567728im,
        -0.2961217014826564+1.916342814369517im,
        -0.3355333803995196+1.559042787764939im,
        -0.3079510693329177+1.196026741543421im,
        -0.3079510693329175-1.19602674154342im,
        -0.3355333803995196-1.559042787764939im,
        -0.2961217014826563-1.916342814369516im,
        -0.2007724354752911-2.195621903567727im,
        -0.07078909049093839-2.347512338012997im]
    m_k = 1.0
    m_f = ZeroPoleGain(m_z, m_p, m_k)

    f = analogfilter(Bandstop(0.5, 2.3), Chebyshev2(10, 20))
    zpkfilter_eq(f, m_f)
end

end # analogfilter

#
# IIR digital filter creation
#
@testset "digital IIR" begin
    # Output of [b, a] = butter(20, 0.5)
    m_b = [8.555155699386467e-06, 0.0001711031139877293,
        0.001625479582883429, 0.009752877497300572,
        0.04144972936352743, 0.1326391339632878,
        0.3315978349082195, 0.663195669816439,
        1.077692963451713, 1.436923951268951,
        1.580616346395846, 1.436923951268951,
        1.077692963451713, 0.663195669816439,
        0.3315978349082195, 0.1326391339632878,
        0.04144972936352743, 0.009752877497300572,
        0.001625479582883429, 0.0001711031139877293,
        8.555155699386467e-06]
    m_a = [1, -9.216626485446244e-15, 2.719352210996272,
        -2.276898740746355e-14, 2.954502383565172,
        -2.181204855972978e-14, 1.663404391798304,
        -9.886771142150971e-15, 0.5272563634534938,
        -1.578399203426284e-15, 0.09588816575455775,
        3.201156931050434e-16, 0.009788250615318749,
        1.651392612127069e-16, 0.0005259945756568433,
        3.034673947897289e-17, 1.306795536212839e-05,
        3.205637858266449e-18, 1.137794123801438e-07,
        9.233765069631315e-20, 1.463813780864114e-10]
    m_f = PolynomialRatio(m_b, m_a)

    f = convert(PolynomialRatio, digitalfilter(Lowpass(0.5), Butterworth(20)))
    tffilter_eq(f, m_f)

    f = convert(PolynomialRatio, digitalfilter(Lowpass(250), Butterworth(20); fs=1000))
    tffilter_eq(f, m_f)

    # Output of [b, a] = butter(20, 0.3, 'high')
    m_b = [0.001797932208654781, -0.03595864417309561, 0.3416071196444083,
        -2.04964271786645, 8.710981550932413, -27.87514096298372,
        69.6878524074593, -139.3757048149186, 226.4855203242427,
        -301.980693765657, 332.1787631422226, -301.980693765657,
        226.4855203242427, -139.3757048149186, 69.6878524074593,
        -27.87514096298372, 8.710981550932413, -2.04964271786645,
        0.3416071196444083, -0.03595864417309561, 0.001797932208654781]
    m_a = [1, -7.99378842342338, 32.24776489137069, -86.15266953725099,
        169.613151737271, -260.1393113842562, 321.1838937487486,
        -325.8437287835835, 275.1584488419961, -194.8984651152305,
        116.2180984348268, -58.35420576527059, 24.59604119108612,
        -8.645276014889031, 2.506713994242244, -0.5898102957633149,
        0.1098868139124379, -0.01561185396257133, 0.001590100744530764,
        -0.0001034620065564712, 3.232560226924501e-06]
    m_f = PolynomialRatio(m_b, m_a)

    f = convert(PolynomialRatio, digitalfilter(Highpass(0.3), Butterworth(20)))
    tffilter_eq(f, m_f)

    f = convert(PolynomialRatio, digitalfilter(Highpass(60), Butterworth(20); fs=400))
    tffilter_eq(f, m_f)

    # Output of [b, a] = butter(7, [0.1 0.4])
    m_b = [0.0009628940476886417, 0, -0.006740258333820491, 0,
        0.02022077500146148, 0, -0.03370129166910246,
        0, 0.03370129166910246, 0, -0.02022077500146148,
        0, 0.006740258333820491, 0, -0.0009628940476886417]
    m_a = [1, -7.763446908073567, 29.02150968091795, -69.51575164764138,
        119.5092528789707, -156.1341322158939, 159.8101214681526,
        -130.0847734566226, 84.56503905088692, -43.67462798637182,
        17.64013826588496, -5.405682857208016, 1.18954580728982,
        -0.1686342472129378, 0.01166272804918956]
    m_f = PolynomialRatio(m_b, m_a)

    f = convert(PolynomialRatio, digitalfilter(Bandpass(0.1, 0.4), Butterworth(7)))
    tffilter_eq(f, m_f)

    f = convert(PolynomialRatio, digitalfilter(Bandpass(400, 1600), Butterworth(7); fs=8000))
    tffilter_eq(f, m_f)

    # Output of [b, a] = butter(4, [0.2 0.25], 'stop')
    m_b = [0.8142545568862771, -4.968628804996451, 14.62659178092118,
        -26.46885325790832, 32.03454308505385, -26.46885325790833,
        14.62659178092118, -4.968628804996451, 0.8142545568862771]
    m_a = [1, -5.789124865012897, 16.16849931613174, -27.77244867328942,
        31.92014561624699, -25.06018377653858, 13.16458034390183,
        -4.253206810966346, 0.6630104843858931]
    m_f = PolynomialRatio(m_b, m_a)

    f = convert(PolynomialRatio, digitalfilter(Bandstop(0.2, 0.25), Butterworth(4)))
    tffilter_eq(f, m_f)

    f = convert(PolynomialRatio, digitalfilter(Bandstop(200, 250), Butterworth(4); fs=2000))
    tffilter_eq(f, m_f)

    # Output of [b, a] = ellip(10, 0.7, 13, 0.4)
    m_b = [0.2797942479261318, -0.546743606764335, 1.704005589668604,
        -2.159911306584612, 3.642222926761125, -3.210370872716824,
        3.642222926761128, -2.159911306584614, 1.704005589668607,
        -0.5467436067643362, 0.2797942479261327]
    m_a = [1, -3.029857317356546, 7.982710263075236, -12.64912738840943,
        17.41532979440429, -17.06917827530357, 14.5191214973975,
        -8.798609366466101, 4.541539167299845, -1.419553904214128, 0.3565809079146795]
    m_f = PolynomialRatio(m_b, m_a)

    f = convert(PolynomialRatio, digitalfilter(Lowpass(0.4), Elliptic(10, 0.7, 13)))
    tffilter_eq(f, m_f)

    f = convert(PolynomialRatio, digitalfilter(Lowpass(120), Elliptic(10, 0.7, 13); fs=600))
    tffilter_eq(f, m_f)

    # Output of [b, a] = ellip(11, 0.7, 17, 0.2, 'high')
    m_b = [0.5737867105773529, -5.288884465999311, 23.07976318423696,
        -62.6831981311594, 117.4527496444787, -159.209133733912,
        159.2091337339121, -117.4527496444788, 62.68319813115945,
        -23.079763184237, 5.288884465999319, -0.5737867105773541]
    m_a = [1, -8.215565996888206, 32.26875224082856, -79.26375768096621,
        134.6328215735552, -165.4634116073934, 149.7532535390064,
        -99.57881504158784, 47.56023313164873, -15.48547977535943,
        3.075141867250689, -0.2777992862430019]
    m_f = PolynomialRatio(m_b, m_a)

    f = convert(PolynomialRatio, digitalfilter(Highpass(0.2), Elliptic(11, 0.7, 17)))
    tffilter_eq(f, m_f)

    f = convert(PolynomialRatio, digitalfilter(Highpass(1700), Elliptic(11, 0.7, 17); fs=17000))
    tffilter_eq(f, m_f)

    # Output of [b, a] = ellip(10, 0.5, 2, [0.2 0.3])
    m_b = [0.7571867287399742, -10.55194327196835, 73.54073467886568,
        -338.6101060102045, 1150.502868412841, -3057.625219554799,
        6581.673203566225, -11732.90330745444, 17574.06211811366,
        -22320.04109078996, 24158.39342879073, -22320.04109078995,
        17574.06211811365, -11732.90330745443, 6581.673203566216,
        -3057.625219554793, 1150.502868412839, -338.6101060102037,
        73.54073467886548, -10.55194327196831, 0.7571867287399715]
    m_a = [1, -13.88122062422027, 96.34606972585827, -441.7050045576331,
        1494.048255114342, -3952.085137071483, 8465.769048060451,
        -15015.81246941687, 22374.64201809294, -28265.00095948501,
        30424.52053126076, -27950.27646663918, 21879.36223420588,
        -14520.36940748522, 8095.785094725445, -3737.670491911818,
        1397.479471832041, -408.6480215434079, 88.17084042962101,
        -12.56723162073412, 0.8957646298422474]
    m_f = PolynomialRatio(m_b, m_a)

    f = convert(PolynomialRatio, digitalfilter(Bandpass(0.2, 0.3), Elliptic(10, 0.5, 2)))
    tffilter_eq(f, m_f)

    f = convert(PolynomialRatio, digitalfilter(Bandpass(1100, 1650), Elliptic(10, 0.5, 2); fs=11000))
    tffilter_eq(f, m_f)

    # Output of [b, a] = ellip(15, 1.8, 52, [0.6 0.7], 'stop')
    m_b = [0.4754470525338341, 6.428928219976483, 47.47972043083799,
        245.8985324356427, 989.107195159456, 3259.995646867947,
        9099.649115772192, 21987.91200123768, 46709.48715187636,
        88217.96445932264, 149368.0297431405, 228141.9056208539,
        315792.8309895032, 397458.2884412499, 455878.980369108,
        477133.9777299722, 455878.9803691082, 397458.2884412502,
        315792.8309895035, 228141.9056208542, 149368.0297431408,
        88217.96445932281, 46709.48715187647, 21987.91200123774,
        9099.649115772219, 3259.995646867959, 989.1071951594597,
        245.8985324356436, 47.4797204308382, 6.428928219976513,
        0.475447052533836]
    m_a = [1, 12.89634891736776, 90.77856214451822, 447.9765044361528,
        1716.574771803699, 5388.380608104304, 14321.19101752449,
        32940.21064000877, 66586.59389679749, 119619.3933180238,
        192555.4138276511, 279453.5193544072, 367301.6888247615,
        438620.3975638363, 476900.358709065, 472649.3359368506,
        427104.9678341324, 351676.250633706, 263451.4609235193,
        179107.598840823, 110104.024869051, 60897.74794125407,
        30103.22741782092, 13182.01328029648, 5052.946545447418,
        1668.118080642225, 463.5003850459777, 104.731419523004,
        18.20949251383043, 2.194519514615899, 0.1423868039113367]
    m_f = PolynomialRatio(m_b, m_a)

    f = convert(PolynomialRatio, digitalfilter(Bandstop(0.6, 0.7), Elliptic(15, 1.8, 52)))
    tffilter_eq(f, m_f)

    f = convert(PolynomialRatio, digitalfilter(Bandstop(3000, 3500), Elliptic(15, 1.8, 52); fs=10000))
    tffilter_eq(f, m_f)
end

#
# Special filters
#
@testset "special" begin
    # Output of [num, den] = iirnotch(0.1, 0.1)
    notch = iirnotch(0.1, 0.1)
    @test notch.b0 ≈ 0.863271264002681
    @test notch.b1 ≈ -1.642039521920206
    @test notch.b2 ≈ 0.863271264002681
    @test notch.a1 ≈ -1.642039521920206
    @test notch.a2 ≈ 0.726542528005361

    notch = iirnotch(60, 1, fs=1000)
    @test notch.b0 ≈ 0.996868235770807
    @test notch.b1 ≈ -1.853729290297204
    @test notch.b2 ≈ 0.996868235770807
    @test notch.a1 ≈ -1.853729290297204
    @test notch.a2 ≈ 0.993736471541615
end

#
# IIR digital filter error conditions
#
@testset "errors" begin
    # zero pole
    @test_throws DomainError Butterworth(0)
    @test_throws DomainError Chebyshev1(0, 1)
    @test_throws DomainError Chebyshev2(0, 1)
    @test_throws DomainError Elliptic(0, 0.1, 0.5)

    # too much passband ripple
    @test_throws DomainError Elliptic(2, 0.5, 0.1)

    # negative ripple
    @test_throws DomainError Chebyshev1(2, -1)
    @test_throws DomainError Chebyshev2(2, -1)
    @test_throws DomainError Elliptic(2, 0.1, -0.5)
end

#
# kaiserord
#
@testset "kaiserord" begin
    kaiserord_jl    = kaiserord(0.1, 60)
    kaiserord_scipy = (74, 1.7994885471673767)    # (n,beta)=kaiserord(60,.1); (n,beta/pi)
    @test kaiserord_jl[1] == kaiserord_scipy[1]
    @test kaiserord_jl[2] ≈ kaiserord_scipy[2]

    kaiserord_jl    = kaiserord(0.1, 21.0 + eps(21.0))
    kaiserord_scipy = (20, 3.087704731700782e-07) # (n,beta)=kaiserord(21.000000000000004,.1); (n,beta/pi)
    @test kaiserord_jl[1] == kaiserord_scipy[1]
    @test kaiserord_jl[2] ≈ kaiserord_scipy[2]

    kaiserord_jl    = kaiserord(0.1, 15)
    kaiserord_scipy = (11, 0.0)                   # (n,beta)=kaiserord(15,.1); (n,beta/pi)
    @test kaiserord_jl[1] == kaiserord_scipy[1]
    @test kaiserord_jl[2] ≈ kaiserord_scipy[2]
end

#
# Window FIR filter taps
#
@testset "window FIR" begin
    winfirtaps_jl    = digitalfilter(Lowpass(0.25),FIRWindow(hamming(128), scale=false); fs=1)
    # firwin(128, 0.25, nyq=.5, scale=False)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_128_lowpass_fc0.25_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ winfirtaps_scipy

    winfirtaps_jl    = digitalfilter(Lowpass(0.25),FIRWindow(hamming(129), scale=false); fs=1)
    # firwin(129, 0.25, nyq=.5, scale=False)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_129_lowpass_fc0.25_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ winfirtaps_scipy

    @test_throws ArgumentError digitalfilter(Highpass(0.25),FIRWindow(hamming(128), scale=false))

    winfirtaps_jl    = digitalfilter(Highpass(0.25),FIRWindow(hamming(129), scale=false); fs=1)
    # firwin(129, 0.25, nyq=.5, scale=False, pass_zero=False)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_129_highpass_fc0.25_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ winfirtaps_scipy

    winfirtaps_jl    = digitalfilter(Bandpass(0.1, 0.2),FIRWindow(hamming(128), scale=false); fs=1)
    # firwin(128, [0.1, 0.2], nyq=.5, scale=False, pass_zero=False)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_128_bandpass_fc0.1_0.2_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ winfirtaps_scipy

    winfirtaps_jl    = digitalfilter(Bandpass(0.1, 0.2),FIRWindow(hamming(129), scale=false); fs=1)
    # firwin(129, [0.1, 0.2], nyq=.5, scale=False, pass_zero=False)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_129_bandpass_fc0.1_0.2_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ winfirtaps_scipy

    @test_throws ArgumentError ComplexBandpass(2, 1)

    # TODO: write actual tests for ComplexBandpass
    winfirtaps_jl = digitalfilter(ComplexBandpass(0.1, 0.2), FIRWindow(hamming(128), scale=false); fs=1)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_128_complexbandpass_fc1.txt"), '\t', ComplexF64)
    @test winfirtaps_jl ≈ winfirtaps_scipy  # replace with real test data

    @test_throws ArgumentError digitalfilter(Bandstop(0.1, 0.2),FIRWindow(hamming(128), scale=false); fs=1)

    winfirtaps_jl    = digitalfilter(Bandstop(0.1, 0.2),FIRWindow(hamming(129), scale=false); fs=1)
    # firwin(129, [0.1, 0.2], nyq=.5, scale=False)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_129_bandstop_fc0.1_0.2_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ vec(winfirtaps_scipy)

    winfirtaps_jl    = digitalfilter(Lowpass(0.25),FIRWindow(hamming(128), scale=true); fs=1)
    # firwin(128, 0.25, nyq=.5)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_128_lowpass_scaled_fc0.25_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ winfirtaps_scipy

    winfirtaps_jl    = digitalfilter(Lowpass(0.25),FIRWindow(hamming(129), scale=true); fs=1)
    # firwin(129, 0.25, nyq=.5)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_129_lowpass_scaled_fc0.25_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ winfirtaps_scipy

    winfirtaps_jl    = digitalfilter(Highpass(0.25),FIRWindow(hamming(129), scale=true); fs=1)
    # firwin(129, 0.25, nyq=.5, pass_zero=False)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_129_highpass_scaled_fc0.25_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ winfirtaps_scipy

    winfirtaps_jl    = digitalfilter(Bandpass(0.1, 0.2),FIRWindow(hamming(128), scale=true); fs=1)
    # firwin(128, [0.1, 0.2], nyq=.5, pass_zero=False)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_128_bandpass_scaled_fc0.1_0.2_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ winfirtaps_scipy

    winfirtaps_jl    = digitalfilter(Bandpass(0.1, 0.2),FIRWindow(hamming(129), scale=true); fs=1)
    # firwin(129, [0.1, 0.2], nyq=.5, scale=False, pass_zero=False)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_129_bandpass_scaled_fc0.1_0.2_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ winfirtaps_scipy

    winfirtaps_jl    = digitalfilter(Bandstop(0.1, 0.2),FIRWindow(hamming(129), scale=true); fs=1)
    # firwin(129, [0.1, 0.2], nyq=.5, scale=False)
    winfirtaps_scipy = readdlm(joinpath(dirname(@__FILE__), "data", "digitalfilter_hamming_129_bandstop_scaled_fc0.1_0.2_fs1.0.txt"),'\t')
    @test winfirtaps_jl ≈ vec(winfirtaps_scipy)
end

# make sure typing is preserved
# ie, user passes in F32, should get ZPK{CF32, CF32, F32}
@testset "typing" begin
    @testset "prototypes" begin
        @test_throws MethodError Butterworth(ComplexF64, 4)
        @test_throws MethodError Chebyshev1(ComplexF64, 4, 1.01)
        @test_throws MethodError Chebyshev2(ComplexF64, 4, 1.01)
        @test_throws MethodError Elliptic(ComplexF64, 4, 0.5, 1.01)

        @test_throws MethodError Butterworth(Char, 4)
        @test_throws MethodError Chebyshev1(Char, 4, 1.01)
        @test_throws MethodError Chebyshev2(Char, 4, 1.01)
        @test_throws MethodError Elliptic(Char, 4, 0.5, 1.01)

        @testset "$T" for T in [BigFloat, Float16, Float32, Float64]
            @test Butterworth(T, 4) isa ZeroPoleGain{:s, Complex{T}, Complex{T}, T}
            @test Chebyshev1(T, 5, 1.16) isa ZeroPoleGain{:s, Complex{T}, Complex{T}, T}
            @test Chebyshev2(T, 5, 1.16) isa ZeroPoleGain{:s, Complex{T}, Complex{T}, T}
            @test Elliptic(T, 5, 0.31, 1.16) isa ZeroPoleGain{:s, Complex{T}, Complex{T}, T}
        end
    end

    @testset "transformed types" begin
        @testset "$T & $R" for T in [BigFloat, Float16, Float32, Float64],
                R in [Lowpass(0.4), Highpass(0.6), Bandpass(0.3, 0.6), Bandstop(0.7, 0.8)]
            @test digitalfilter(R, Butterworth(T, 5)) isa ZeroPoleGain{:z, Complex{T}, Complex{T}, T}
            @test digitalfilter(R, Chebyshev1(T, 5, 1.16)) isa ZeroPoleGain{:z, Complex{T}, Complex{T}, T}
            @test digitalfilter(R, Chebyshev2(T, 5, 1.16)) isa ZeroPoleGain{:z, Complex{T}, Complex{T}, T}
            @test digitalfilter(R, Elliptic(T, 5, 0.31, 1.16)) isa ZeroPoleGain{:z, Complex{T}, Complex{T}, T}
        end
    end
end
