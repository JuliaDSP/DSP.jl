require(joinpath(dirname(@__FILE__), "FilterTestHelpers.jl"))
using DSP, Base.Test, FilterTestHelpers

# Test conversion to SOS against MATLAB
# Test poles/zeros generated with:
#=
 mag = rand(10)
 arg = rand(10)
 z = mag.*cospi(arg) + im*mag.*sinpi(arg)
 z = [z, conj(z)]
 mag = rand(10)
 arg = rand(10)
 p = mag.*cospi(arg) + im*mag.*sinpi(arg)
 p = [p, conj(p)]
 k = real(prod(p))/real(prod(z))
=#
z = [0.07674942314081117 + 0.5605934468331276im,-0.10637764563083413 + 0.00938830970435945im,0.19723688182100613 + 0.20500254264692958im,0.07019769777809694 + 0.00040337356287483566im,-0.029225401438832663 + 0.35500551559734517im,-0.35980697033738923 + 0.21595798755003964im,0.3712083544916094 + 0.41767928564585416im,-0.17585090520154495 + 0.32300027988596314im,-0.2308322620393009 + 0.3539248310694154im,-0.008498685920569043 + 0.028356975487226484im,0.07674942314081117 - 0.5605934468331276im,-0.10637764563083413 - 0.00938830970435945im,0.19723688182100613 - 0.20500254264692958im,0.07019769777809694 - 0.00040337356287483566im,-0.029225401438832663 - 0.35500551559734517im,-0.35980697033738923 - 0.21595798755003964im,0.3712083544916094 - 0.41767928564585416im,-0.17585090520154495 - 0.32300027988596314im,-0.2308322620393009 - 0.3539248310694154im,-0.008498685920569043 - 0.028356975487226484im]
p = [-0.946179900464128 + 0.23187351222922784im,0.05191136844411161 + 0.8713748123758278im,-0.05109307872385063 + 0.7440280322767342im,-0.032892467440199066 + 0.024218620496805687im,-0.1266287653888985 + 0.33150956246323654im,-0.15051989876024102 + 0.9373469058653078im,-0.6672740143157547 + 0.5034138963468052im,-0.790336466064852 + 0.109069102200402im,-0.009317017740249631 + 0.013158400271660778im,0.5075897927503011 + 0.02902816288546107im,-0.946179900464128 - 0.23187351222922784im,0.05191136844411161 - 0.8713748123758278im,-0.05109307872385063 - 0.7440280322767342im,-0.032892467440199066 - 0.024218620496805687im,-0.1266287653888985 - 0.33150956246323654im,-0.15051989876024102 - 0.9373469058653078im,-0.6672740143157547 - 0.5034138963468052im,-0.790336466064852 - 0.109069102200402im,-0.009317017740249631 - 0.013158400271660778im,0.5075897927503011 - 0.02902816288546107im]
k = 10586.686805294861

# MATLAB:
#=
 [sos, g] = zp2sos(z, p, k)
 save('...', 'sos', '-ascii', '-double')
=#
m_sos_full = [
   1.0000000000000000e+00  -1.4039539555619387e-01   4.9278794835762620e-03   1.0000000000000000e+00   1.8634035480499262e-02   2.5995031728136877e-04
   1.0000000000000000e+00   1.6997371841138087e-02   8.7634572115964215e-04   1.0000000000000000e+00   6.5784934880398133e-02   1.6684559930728524e-03
   1.0000000000000000e+00   2.1275529126166826e-01   1.1404343849064294e-02   1.0000000000000000e+00   2.5325753077779700e-01   1.2593343422848324e-01
   1.0000000000000000e+00  -3.9447376364201225e-01   8.0928430042179728e-02   1.0000000000000000e+00  -1.0151795855006023e+00   2.5849003194479853e-01
   1.0000000000000000e+00  -7.4241670898321876e-01   3.1225162810199936e-01   1.0000000000000000e+00   1.0218615744770126e-01   5.5618821550707065e-01
   1.0000000000000000e+00   3.5170181040308990e-01   1.3525272166661328e-01   1.0000000000000000e+00   1.5806729321297039e+00   6.3652779864668074e-01
   1.0000000000000000e+00   4.6166452407860181e-01   1.7854631924569470e-01   1.0000000000000000e+00   1.3345480286315095e+00   6.9868016121613397e-01
   1.0000000000000000e+00   5.8450802877665325e-02   1.2688304019379779e-01   1.0000000000000000e+00  -1.0382273688822322e-01   7.6198885381674941e-01
   1.0000000000000000e+00  -1.5349884628162233e-01   3.2015548658469395e-01   1.0000000000000000e+00   3.0103979752048204e-01   9.0127546185805940e-01
   1.0000000000000000e+00   7.1961394067477846e-01   1.7609890829003397e-01   1.0000000000000000e+00   1.8923598009282561e+00   9.4902172971582510e-01
]
@test_approx_eq m_sos_full sosfilter_to_matrix(convert(SecondOrderSections, ZeroPoleGain(z, p, k)))

# And with half of the zeros removed
# MATLAB:
# [sos, g] = zp2sos(z([1:5, 11:15]), p, k)
zp = z[[1:5; 11:15]]
m_sos_half = [
   0.0000000000000000e+00   0.0000000000000000e+00   1.0000000000000000e+00   1.0000000000000000e+00   1.8634035480499262e-02   2.5995031728136877e-04
   0.0000000000000000e+00   0.0000000000000000e+00   1.0000000000000000e+00   1.0000000000000000e+00   6.5784934880398133e-02   1.6684559930728524e-03
   0.0000000000000000e+00   0.0000000000000000e+00   1.0000000000000000e+00   1.0000000000000000e+00   2.5325753077779700e-01   1.2593343422848324e-01
   0.0000000000000000e+00   0.0000000000000000e+00   1.0000000000000000e+00   1.0000000000000000e+00  -1.0151795855006023e+00   2.5849003194479853e-01
   0.0000000000000000e+00   0.0000000000000000e+00   1.0000000000000000e+00   1.0000000000000000e+00   1.0218615744770126e-01   5.5618821550707065e-01
   1.0000000000000000e+00  -3.9447376364201225e-01   8.0928430042179728e-02   1.0000000000000000e+00   1.5806729321297039e+00   6.3652779864668074e-01
   1.0000000000000000e+00  -1.4039539555619387e-01   4.9278794835762620e-03   1.0000000000000000e+00   1.3345480286315095e+00   6.9868016121613397e-01
   1.0000000000000000e+00   5.8450802877665325e-02   1.2688304019379779e-01   1.0000000000000000e+00  -1.0382273688822322e-01   7.6198885381674941e-01
   1.0000000000000000e+00  -1.5349884628162233e-01   3.2015548658469395e-01   1.0000000000000000e+00   3.0103979752048204e-01   9.0127546185805940e-01
   1.0000000000000000e+00   2.1275529126166826e-01   1.1404343849064294e-02   1.0000000000000000e+00   1.8923598009282561e+00   9.4902172971582510e-01
]
@test_approx_eq m_sos_half sosfilter_to_matrix(convert(SecondOrderSections, ZeroPoleGain(zp, p, k)))

# And with an extra real pole
pp = [p; 0.7]
# MATLAB:
#=
 pp = [p'; 0.7]
 [sos, g] = zp2sos(z, pp, k)
 =#
m_sos_extra = [
   0.0000000000000000e+00   1.0000000000000000e+00   0.0000000000000000e+00   1.0000000000000000e+00  -6.9999999999999996e-01   0.0000000000000000e+00
   1.0000000000000000e+00  -1.4039539555619387e-01   4.9278794835762620e-03   1.0000000000000000e+00   1.8634035480499262e-02   2.5995031728136877e-04
   1.0000000000000000e+00   1.6997371841138087e-02   8.7634572115964215e-04   1.0000000000000000e+00   6.5784934880398133e-02   1.6684559930728524e-03
   1.0000000000000000e+00   2.1275529126166826e-01   1.1404343849064294e-02   1.0000000000000000e+00   2.5325753077779700e-01   1.2593343422848324e-01
   1.0000000000000000e+00  -3.9447376364201225e-01   8.0928430042179728e-02   1.0000000000000000e+00  -1.0151795855006023e+00   2.5849003194479853e-01
   1.0000000000000000e+00  -7.4241670898321876e-01   3.1225162810199936e-01   1.0000000000000000e+00   1.0218615744770126e-01   5.5618821550707065e-01
   1.0000000000000000e+00   3.5170181040308990e-01   1.3525272166661328e-01   1.0000000000000000e+00   1.5806729321297039e+00   6.3652779864668074e-01
   1.0000000000000000e+00   4.6166452407860181e-01   1.7854631924569470e-01   1.0000000000000000e+00   1.3345480286315095e+00   6.9868016121613397e-01
   1.0000000000000000e+00   5.8450802877665325e-02   1.2688304019379779e-01   1.0000000000000000e+00  -1.0382273688822322e-01   7.6198885381674941e-01
   1.0000000000000000e+00  -1.5349884628162233e-01   3.2015548658469395e-01   1.0000000000000000e+00   3.0103979752048204e-01   9.0127546185805940e-01
   1.0000000000000000e+00   7.1961394067477846e-01   1.7609890829003397e-01   1.0000000000000000e+00   1.8923598009282561e+00   9.4902172971582510e-01
]
@test_approx_eq m_sos_extra sosfilter_to_matrix(convert(SecondOrderSections, ZeroPoleGain(z, pp, k)))

# And with only poles (no zeros)
m_sos_only_poles = copy(m_sos_full)
m_sos_only_poles[:, 1:2] = 0
m_sos_only_poles[:, 3] = 1
@test_approx_eq m_sos_only_poles sosfilter_to_matrix(convert(SecondOrderSections, ZeroPoleGain(Float64[], p, k)))

# Test that a filter with repeated zeros is handled properly
# MATLAB:
#= 
 [z,p,k] = butter(2, [49.5 50.5]/500, 'stop')
 [sos,g] = zp2sos(z, p, k)
=#
m_sos_butterworth_bs = [
   1.0000000000000000e+00  -1.9021224191804869e+00   1.0000000000000000e+00   1.0000000000000000e+00  -1.8964983429993663e+00   9.9553672990017417e-01
   1.0000000000000000e+00  -1.9021224191804869e+00   1.0000000000000000e+00   1.0000000000000000e+00  -1.8992956433548462e+00   9.9559721515078736e-01
]
f = convert(SecondOrderSections, digitalfilter(Bandstop(49.5, 50.5; fs=1000), DSP.Butterworth(2)))
@test_approx_eq m_sos_butterworth_bs sosfilter_to_matrix(f)
@test_approx_eq f.g 0.995566972017647

# Test that a numerically challenging filter (high order, clustered
# roots) has acceptable errors in its coefficients after conversion to
# SOS
f = ZeroPoleGain(ones(100), 0.99*ones(100), 1)
g = convert(SecondOrderSections, f)
tffilter_eq(convert(PolynomialRatio, f), convert(PolynomialRatio, g))

for f in (digitalfilter(Lowpass(0.5), Butterworth(1)), digitalfilter(Lowpass(0.5), Butterworth(2)),
          digitalfilter(Bandpass(0.25, 0.75), Butterworth(1)))
    for ftype1 in (ZeroPoleGain, PolynomialRatio, Biquad, SecondOrderSections)
        f2 = convert(ftype1, f)
        for ftype2 in (ZeroPoleGain, PolynomialRatio, Biquad, SecondOrderSections)
            f3 = convert(ftype2, f)
            try
                zpkfilter_eq(convert(ZeroPoleGain, f), convert(ZeroPoleGain, f3), sqrt(eps()))
            catch e
                println("Conversion from $ftype1 to $ftype2 failed:")
                rethrow(e)
            end
        end
    end
end

for proto in (Butterworth(3), Chebyshev1(3, 1), Chebyshev2(3, 1))
    f = digitalfilter(Lowpass(0.5), proto)
    for ftype1 in (ZeroPoleGain, PolynomialRatio, SecondOrderSections)
        f2 = convert(ftype1, f)
        for ftype2 in (ZeroPoleGain, PolynomialRatio, SecondOrderSections)
            f3 = convert(ftype2, f2)
            zpkfilter_eq(convert(ZeroPoleGain, f), convert(ZeroPoleGain, f3), 2e-5)
        end
    end
end
